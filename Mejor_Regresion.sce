global iXSize iYSize
iXSize = [1, 1]
iYSize = [1, 1]

// This GUI file is generated by guibuilder version 4.2.1
//////////
f=figure('figure_position',[400,50],'figure_size',[640,480],'auto_resize','on','background',[33],'figure_name','Graphic window number %d','dockable','off','infobar_visible','off','toolbar_visible','off','menubar_visible','off','default_axes','on','visible','off');
//////////
handles.dummy = 0;
handles.Mejor_Regresion=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Lucida Grande','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.4265625,0.8034934,0.159375,0.0283843],'Relief','default','SliderStep',[0.01,0.1],'String','Mejor_Regresion','Style','text','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','Mejor_Regresion','Callback','')
handles.Text_Lista_X=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Lucida Grande','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.203125,0.7030568,0.1453125,0.0262009],'Relief','default','SliderStep',[0.01,0.1],'String','Lista_X','Style','text','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','Text_Lista_X','Callback','')
handles.Lista_X=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Lucida Grande','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.38125,0.6965066,0.1265625,0.0262009],'Relief','default','SliderStep',[0.01,0.1],'String','Input','Style','edit','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','Lista_X','Callback','')
handles.Text_Lista_Y=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Lucida Grande','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.603125,0.7008734,0.14375,0.0262009],'Relief','default','SliderStep',[0.01,0.1],'String','Lista_Y','Style','text','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','Text_Lista_Y','Callback','')
handles.Lista_Y=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Lucida Grande','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.775,0.6965066,0.0890625,0.0240175],'Relief','default','SliderStep',[0.01,0.1],'String','Input','Style','edit','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','Lista Y','Callback','')
handles.Text_X_por_estimar=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Lucida Grande','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.2015625,0.6004367,0.15,0.0283843],'Relief','default','SliderStep',[0.01,0.1],'String','X por extimar','Style','text','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','Text_X_por_estimar','Callback','')
handles.X_por_estimar=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Lucida Grande','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.3828125,0.6004367,0.115625,0.0240175],'Relief','default','SliderStep',[0.01,0.1],'String','Input','Style','edit','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','X_por_estimar','Callback','')
handles.Text_Funcion=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Lucida Grande','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.603125,0.6004367,0.1390625,0.0240175],'Relief','default','SliderStep',[0.01,0.1],'String','Funcion','Style','text','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','Text_Funcion','Callback','')
handles.Funcion=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Lucida Grande','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.7828125,0.6004367,0.0890625,0.0218341],'Relief','default','SliderStep',[0.01,0.1],'String','Input','Style','edit','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','Funcion','Callback','')
handles.Calcula=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Lucida Grande','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.438125,0.3973799,0.121875,0.0436681],'Relief','default','SliderStep',[0.01,0.1],'String','Calcula','Style','pushbutton','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','Calcula','Callback','Calcula_callback(handles)')
handles.Respuesta=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Lucida Grande','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.3984375,0.2008734,0.2015625,0.1004367],'Relief','default','SliderStep',[0.01,0.1],'String','Respuesta','Style','edit','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','Respuesta','Callback','')


f.visible = "on";

///////////////////////////////////////////////////////
// PuntoRegresionLineal
// Calcula cuánto vale la regresión lineal dada, a
// partir de la x y la matriz de coeficientes dados
// Parámetros:
// dMatriz Matriz de coeficientes
// dX Punto en x a partir de la cual se va a calcular
// Retorno:
// dY El valor de la regresión en el punto x
////////////////////////////////////////////////////
function [dY] = PuntoRegresionLineal(dMatriz, dX)
  dY = dMatriz(1) + dMatriz(2) * dX
endfunction

///////////////////////////////////////////////////////
// RegresionLineal
// Calcula una regresión lineal a partir de los
// conjuntos x y dados. Además estima un punto en x y
// su r2
// Parámetros:
// dArregloX conjunto de x
// dArregloY conjunto de y
// dXPorEstimar valor de x por estimar
// dSST valor SST de los conjuntos x, y
// Retorno:
// dYEstimada Valor de dXPorEstimar en la regresión
// dR2 Valor de r2 de la regresión
///////////////////////////////////////////////////////
function [dYEstimada, dR2] = RegresionLineal(dArregloX, dArregloY, dXPorEstimar, dSST)
  iN = size(dArregloX, 2)
  dSumaX = 0
  dSumaX2 = 0
  dSumaY = 0
  dSumaYX = 0
  for iIndex = 1 : iN
    dX = dArregloX(iIndex)
    dY = dArregloY(iIndex)
    dSumaX = dSumaX + dX
    dSumaX2 = dSumaX2 + dX ^ 2
    dSumaY = dSumaY + dY
    dSumaYX = dSumaYX + dY * dX
  end
  dMatriz1 = [iN, dSumaX; dSumaX, dSumaX2]
  dMatriz2 = [dSumaY; dSumaYX]
  dMatrizRes = inv(dMatriz1) * dMatriz2
  dSSE = 0
  for iIndex = 1 : iN
    dX = dArregloX(iIndex)
    dSSE = dSSE + (dArregloY(iIndex) - PuntoRegresionLineal(dMatrizRes, dX)) ^ 2
  end
  dR2 = (dSST - dSSE) / dSST
  dYEstimada = PuntoRegresionLineal(dMatrizRes, dXPorEstimar)
  disp("Lineal : y = " + string(dMatrizRes(1)) + " + (" + string(dMatrizRes(2)) + ") * x , r2 = " + string(dR2))
endfunction

///////////////////////////////////////////////////////
// PuntoRegresionCuadratica
// Calcula cuánto vale la regresión cuadratica dada, a
// partir de la x y la matriz de coeficientes dados
// Parámetros:
// dMatriz Matriz de coeficientes
// dX Punto en x a partir de la cual se va a calcular
// Retorno:
// dY El valor de la regresión en el punto x
////////////////////////////////////////////////////
function [dY] = PuntoRegresionCuadratica(dMatriz, dX)
  dY = dMatriz(1) + dMatriz(2) * dX + dMatriz(3) * dX ^ 2
endfunction

///////////////////////////////////////////////////////
// RegresionCuadratica
// Calcula una regresión cuadrática a partir de los
// conjuntos x y dados. Además estima un punto en x y
// su r2
// Parámetros:
// dArregloX conjunto de x
// dArregloY conjunto de y
// dXPorEstimar valor de x por estimar
// dSST valor SST de los conjuntos x, y
// Retorno:
// dYEstimada Valor de dXPorEstimar en la regresión
// dR2 Valor de r2 de la regresión
///////////////////////////////////////////////////////
function [dYEstimada, dR2] = RegresionCuadratica(dArregloX, dArregloY, dXPorEstimar, dSST)
  iN = size(dArregloX, 2)
  dSumaX = 0
  dSumaX2 = 0
  dSumaX3 = 0
  dSumaX4 = 0
  dSumaY = 0
  dSumaYX = 0
  dSumaYX2 = 0
  for iIndex = 1 : iN
    dX = dArregloX(iIndex)
    dY = dArregloY(iIndex)
    dSumaX = dSumaX + dX
    dSumaX2 = dSumaX2 + dX ^ 2
    dSumaX3 = dSumaX3 + dX ^ 3
    dSumaX4 = dSumaX4 + dX ^ 4
    dSumaY = dSumaY + dY
    dSumaYX = dSumaYX + dY * dX
    dSumaYX2 = dSumaYX2 + dY * dX ^2
  end
  dMatriz1 = [iN, dSumaX, dSumaX2; dSumaX, dSumaX2, dSumaX3; dSumaX2, dSumaX3, dSumaX4]
  dMatriz2 = [dSumaY; dSumaYX; dSumaYX2]
  dMatrizRes = inv(dMatriz1) * dMatriz2
  dSSE = 0
  for iIndex = 1 : iN
    dX = dArregloX(iIndex)
    dSSE = dSSE + (dArregloY(iIndex) - PuntoRegresionCuadratica(dMatrizRes, dX)) ^ 2
  end
  dR2 = (dSST - dSSE) / dSST
  dYEstimada = PuntoRegresionCuadratica(dMatrizRes, dXPorEstimar)
  disp("Cuadrática : y = " + string(dMatrizRes(1)) + " + (" + string(dMatrizRes(2)) + ") * x + (" + string(dMatrizRes(3)) + ") * x ^2 , r2 = " + string(dR2))
endfunction

///////////////////////////////////////////////////////
// PuntoRegresionExponencial
// Calcula cuánto vale la regresión exponencial dada, a
// partir de la x y la matriz de coeficientes dados
// Parámetros:
// dMatriz Matriz de coeficientes
// dX Punto en x a partir de la cual se va a calcular
// Retorno:
// dY El valor de la regresión en el punto x
////////////////////////////////////////////////////
function [dY] = PuntoRegresionExponencial(dMatriz, dX)
  dY = dMatriz(1) * exp(dMatriz(2) * dX)
endfunction

///////////////////////////////////////////////////////
// RegresionExponencial
// Calcula una regresión exponencial a partir de los
// conjuntos x y dados. Además estima un punto en x y
// su r2
// Parámetros:
// dArregloX conjunto de x
// dArregloY conjunto de y
// dXPorEstimar valor de x por estimar
// dSST valor SST de los conjuntos x, y
// Retorno:
// dYEstimada Valor de dXPorEstimar en la regresión
// dR2 Valor de r2 de la regresión
///////////////////////////////////////////////////////
function [dYEstimada, dR2] = RegresionExponencial(dArregloX, dArregloY, dXPorEstimar, dSST)
  iN = size(dArregloX, 2)
  dSumaX = 0
  dSumaX2 = 0
  dSumaLnY = 0
  dSumaLnYX = 0
  for iIndex = 1 : iN
    dX = dArregloX(iIndex)
    dY = log(dArregloY(iIndex))
    dSumaX = dSumaX + dX
    dSumaX2 = dSumaX2 + dX ^ 2
    dSumaLnY = dSumaLnY + dY
    dSumaLnYX = dSumaLnYX + dY * dX
  end
  dMatriz1 = [iN, dSumaX; dSumaX, dSumaX2]
  dMatriz2 = [dSumaLnY; dSumaLnYX]
  dMatrizRes = inv(dMatriz1) * dMatriz2
  dMatrizRes(1) = exp(dMatrizRes(1))
  dSSE = 0
  for iIndex = 1 : iN
    dX = dArregloX(iIndex)
    dSSE = dSSE + ((log(dArregloY(iIndex)) - log(dMatrizRes(1)) - dMatrizRes(2)*dX)) ^ 2
  end
  dR2 = (dSST - dSSE) / dSST
  dYEstimada = PuntoRegresionExponencial(dMatrizRes, dXPorEstimar)
  disp("Exponencial : y = " + string(dMatrizRes(1)) + " * e ^ (" + string(dMatrizRes(2)) + " * x ), r2 = " + string(dR2))
endfunction

///////////////////////////////////////////////////////
// PuntoRegresionPotencial
// Calcula cuánto vale la regresión potencial dada, a
// partir de la x y la matriz de coeficientes dados
// Parámetros:
// dMatriz Matriz de coeficientes
// dX Punto en x a partir de la cual se va a calcular
// Retorno:
// dY El valor de la regresión en el punto x
////////////////////////////////////////////////////
function [dY] = PuntoRegresionPotencial(dMatriz, dX)
  dY = dMatriz(1) * dX ^ dMatriz(2)
endfunction

///////////////////////////////////////////////////////
// RegresionPotencial
// Calcula una regresión potencial a partir de los
// conjuntos x y dados. Además estima un punto en x y
// su r2
// Parámetros:
// dArregloX conjunto de x
// dArregloY conjunto de y
// dXPorEstimar valor de x por estimar
// dSST valor SST de los conjuntos x, y
// Retorno:
// dYEstimada Valor de dXPorEstimar en la regresión
// dR2 Valor de r2 de la regresión
///////////////////////////////////////////////////////
function [dYEstimada, dR2] = RegresionPotencial(dArregloX, dArregloY, dXPorEstimar, dSST)
  iN = size(dArregloX, 2)
  dSumaLnX = 0
  dSumaLn2X = 0
  dSumaLnY = 0
  dSumaLnYLnX = 0
  for iIndex = 1 : iN
    dLnX = log(dArregloX(iIndex))
    dLnY = log(dArregloY(iIndex))
    dSumaLnX = dSumaLnX + dLnX
    dSumaLn2X = dSumaLn2X + dLnX ^ 2
    dSumaLnY = dSumaLnY + dLnY
    dSumaLnYLnX = dSumaLnYLnX + dLnY * dLnX
  end
  dMatriz1 = [iN, dSumaLnX; dSumaLnX, dSumaLn2X]
  dMatriz2 = [dSumaLnY; dSumaLnYLnX]
  dMatrizRes = inv(dMatriz1) * dMatriz2
  dMatrizRes(1) = exp(dMatrizRes(1))
  dSSE = 0
  for iIndex = 1 : iN
    dX = dArregloX(iIndex)
    dSSE = dSSE + (log(dArregloY(iIndex)) - log(dMatrizRes(1)) - dMatrizRes(2)*log(dX)) ^ 2
  end
  dR2 = (dSST - dSSE) / dSST
  dYEstimada = PuntoRegresionPotencial(dMatrizRes, dXPorEstimar)
  disp("Potencial : y = " + string(dMatrizRes(1)) + " * x ^ (" + string(dMatrizRes(2)) + "), r2 = " + string(dR2))
endfunction

////////////////////////////////////////////////////
// CalcularSST
// Calcula el valor sst con respecto a un conjunto
// 'y' para las regresiones lineales
// Parámetros:
// dArregloY conjunto de valores de Y
// Retorno:
// dSST Valor sst del conjunto de valores Y
////////////////////////////////////////////////////
function [dSST] = CalcularSST(dArregloY)
  dPromedio = 0
  iN = size(dArregloY, 2)
  for iIndex = 1 : iN
    dPromedio = dPromedio + dArregloY(iIndex)
  end
  dPromedio = dPromedio / iN
  dSST = 0
  for iIndex = 1 : iN
    dSST = dSST + (dArregloY(iIndex) - dPromedio) ^ 2
  end
endfunction

////////////////////////////////////////////////////
// CalcularSSTLn
// Calcula el valor sst con respecto a un conjunto
// 'y' pero con valores de ln para las regresiones
// no lineales
// Parámetros:
// dArregloY conjunto de valores de Y
// Retorno:
// dSST Valor sst del conjunto de valores Y
////////////////////////////////////////////////////
function [dSST] = CalcularSSTLn(dArregloY)
  dPromedio = 0
  iN = size(dArregloY, 2)
  for iIndex = 1 : iN
    dPromedio = dPromedio + log(dArregloY(iIndex))
  end
  dPromedio = dPromedio / iN
  dSST = 0
  for iIndex = 1 : iN
    dSST = dSST + (log(dArregloY(iIndex)) - dPromedio) ^ 2
  end
endfunction

//////////////////////////////////////////////////////
// MejorRegresion
// Calcula la regesión lineal, cuadrática, exponencial
// y potencia de un cojunto de xs y ys y determina
// cuál es la mejor usando r2 y usa esa regresión para
// calcular cuánto valdría una X
// Parámetros:
// dArregloX conjunto de valores de X
// dArregloY conjunto de valores de Y
// dXPorEstimar valor por estimar en X
//
// Retorno:
// sRespuesta la respuesta de la mejor regresion
// determinando cual regresion es la mejor, el r2 de
// dicho modelo y cual fue el valor estimado en el
// valor X dado
//////////////////////////////////////////////////////
function [sRespuesta] = MejorRegresion(dArregloX, dArregloY, dXPorEstimar)
  if size(dArregloX, 2) <> size(dArregloY, 2)
    disp("Los conjuntos deben ser del mismo tamaño")
    return
  end
  dSST = CalcularSST(dArregloY)
  sMejorModelo = "lineal"
  [dMejorY, dMejorR2] = RegresionLineal(dArregloX, dArregloY, dXPorEstimar, dSST)
  [dY, dR2] = RegresionCuadratica(dArregloX, dArregloY, dXPorEstimar, dSST)
  if dR2 > dMejorR2
    dMejorR2 = dR2
    dMejorY = dY
    sMejorModelo = "cuadrático"
  end
  dSST = CalcularSSTLn(dArregloY)
  [dY, dR2] = RegresionExponencial(dArregloX, dArregloY, dXPorEstimar, dSST)
  if dR2 > dMejorR2
    dMejorR2 = dR2
    dMejorY = dY
    sMejorModelo = "exponencial"
  end
  [dY, dR2] = RegresionPotencial(dArregloX, dArregloY, dXPorEstimar, dSST)
  if dR2 > dMejorR2
    dMejorR2 = dR2
    dMejorY = dY
    sMejorModelo = "potencial"
  end
  sRespuesta = "El mejor modelo es el " + sMejorModelo + " con r2 = " + string(dMejorR2)
  sRespuesta = sRespuesta + "Usando el mejor modelo el valor estimado para x = " + string(dXPorEstimar) + " es: " + string(dMejorY)
endfunction

//////////
// Callbacks are defined as below. Please do not delete the comments as it will be used in coming version
//////////

function Calcula_callback(handles)
  dX = strtod(matrix(handles.Lista_X.String, iXSize))
  dY = strtod(matrix(handles.Lista_Y.String, iYSize))
  dXPorEstimar = strtod(handles.X_por_estimar.String)
  // handles.Respuesta.String = MejorRegresion(dArregloX, dArregloY, dXPorEstimar)
endfunction

function Incrementa_Renglon_X(handles)
  sMatriz = matrix(handles.Lista_X.String, iXSize)
  sMatrizCeros = string(zeros(1, iXSize(2)))
  sMatriz = [sMatriz; sMatrizCeros]
  handles.Lista_X.String = sMatriz
  iXSize(1) = iXSize(1) + 1
endfunction

function Borra_Renglon_X(handles)
  sMatriz = matrix(handles.Lista_X.String, iXSize)
  sMatriz(iXSize(1), :) = []
  handles.Lista_X.String = sMatriz
  iXSize(1) = iXSize(1) - 1
endfunction

function Incrementa_Renglon_Y(handles)
  sMatriz = matrix(handles.Lista_Y.String, iYSize)
  sMatrizCeros = string(zeros(1, iYSize(2)))
  sMatriz = [sMatriz; sMatrizCeros]
  handles.Lista_Y.String = sMatriz
  iYSize(1) = iYSize(1) + 1
endfunction

function Borra_Renglon_Y(handles)
  sMatriz = matrix(handles.Lista_Y.String, iYSize)
  sMatriz(iYSize(1), :) = []
  handles.Lista_Y.String = sMatriz
  iYSize(1) = iYSize(1) - 1
endfunction
